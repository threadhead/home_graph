= HomeGraph Rails Application for ElkM1

This graphs data that is collected by thermostats and the {ELKM1 perl script}[https://github.com/threadhead/elkm1--control/tree]. There really is no documentation other than what you read here, but I'll try to layout the files you will need to edit to get things running.

I apologize up-front that this project is so specific to my setup. It was never intended for others to use, and I'm not sure it's worth the effort to abstract everything for other configurations. <i>It just may not be for the faint-of-heart to setup and get running</i>.


This release provides the following features:

* Displays tidy little graphs of your thermostats, and elk m1 zones.

* uses Open Flash Chart (version 1) for graphs. Will be upgrading to OFC2 soon.


== Requirements

* rails (version >= 2.3)


== Installation

Download the the repository into a <tt>home_graph</tt> directory:

  git clone git://github.com/threadhead/home_graph.git


== What You Need to Edit
=== Database.yml
You will need to copy the _database.yml.example_ to _database.yml_ and edit for your particular database setup. Because we are just using ActiveRecord to connect to an existing database to simply read and query (no writes), there are no migrations to run and no _schema.rb_.

=== Models
You will need to set the table names where data is stored. Just edit the constant at the top of the Thermo and Zonelog models.

	class Thermo < ActiveRecord::Base
	  TABLE_NAME = "thermo"
		...
	
	class Zonelog < ActiveRecord::Base
	  TABLE_NAME = "zone_log"
		...

<b>Important Note</b>: In my situation, the _thermo_ table and _zone_log_ table are in separate databases. Therefore you may need to remove the following line from the Zonelog model (line 4):

	establish_connection "elkm1_#{RAILS_ENV}"


Note: there are other models for _InsideTemp_, _KeypadTemp_, and _OutsideTemp_, but they do nothing at this time. Someday, I'll get around to them.

=== Schema
There is a lot of hard coded sql queries in this project, some may be specific to MySQL. By using the power of MySQL to group and summarize statistics, accumulation is *much* faster than using loops of large ActiveRecord hashes. The downside is that this project probably will not run unless you setup your tables exactly, or at least very similar, to mine. The best I can do is show you the table schema for the Zonelog and Thermo models.

==== ZoneLog Table Schema

	--
	-- Database: `elkm1`
	--
	-- Table structure for table `zone_log`
	--

	CREATE TABLE `zone_log` (
	  `id` int(11) NOT NULL auto_increment,
	  `zone_number` int(11) NOT NULL,
	  `zone` varchar(30) NOT NULL,
	  `time_open` datetime default NULL,
	  `time_close` datetime default NULL,
	  PRIMARY KEY  (`id`),
	  KEY `zone` (`zone`)
	) ENGINE=MyISAM  DEFAULT CHARSET=latin1;

See the following {perl script}[http://gist.github.com/151716] for a sample of how to setup a daemon that can monitor an elk-m1 system using the {ELKM1 perl script}[https://github.com/threadhead/elkm1--control/tree] and log every zone change to MySQL.

==== Thermo Table Schema

	--
	-- Database: 'homeseer'
	--
	-- Table structure for table 'thermo'
	--

	CREATE TABLE thermo (
	  id int(11) NOT NULL auto_increment,
	  time_on datetime default NULL,
	  time_off datetime default NULL,
	  thermo_loc varchar(10) NOT NULL,
	  `mode` varchar(10) NOT NULL default '',
	  PRIMARY KEY  (id)
	) ENGINE=MyISAM  DEFAULT CHARSET=latin1;

This is pretty convoluted, but to log thermostat data I use Homeseer (version 1.7.X, don't laugh) running in a VM on my linux server. Homeseer triggers a perl script, that in turn triggers a Ruby script. The ruby script then logs the data. Why all the complexity? Simple, Homeseer and ODBC just are not stable enough, but ruby is. Go figure?

See {this VBscript}[http://gist.github.com/151721] that Homeseer executes whenever a thermostat is turned on and when it is turned off. 

The above VBscript triggers the execution of {this ruby script}[http://gist.github.com/151723] that actually does the logging to MySQL.

I'm sure there is a better way, but this is the only setup that I have found that works _and_ is reliable.


== Testing

Ain't none.


== License

This package is licensed under the MIT license and/or the {Creative
Commons Attribution-ShareAlike}[http://creativecommons.org/licenses/by-sa/2.5/legalcode].

